Petrogiannopoulos Georgios
Single client tcp mail-server

The assignement contains 2 source files , 1 for the server and 1 for the client.
The goal of this assignement is to create a simple tcp mail-server.
The server starts at given ip and port and waits for the client to connect , only one client is allowed to connect at the same time. 
When the client connects to the server it is asked to enter a username, after entering a username there are 2 options , write a "mail" to another user or read inbox messages.The ip address of the server and client must be inserted by the user at execution ,while the port number should be 5182.

Compile:
	gcc server.c -o server
	gcc client.c -o client
Run: 
	./server ip_address
	./client ip_address

Client
	Write:
		when user selects to write a message he must enter:
			-the recipient's name 
			-the message

		then the client's program merges the username,recipient and the message into 1 string, client sends this string with the this form: sender|recipient|message

		The server receives this string and extracts the recipient's name from it, then the server appends this string within a txt file with the recipient's name

	Read:
		the user selects the "read" option and the client program sends only the username to the server.

		Then the server receives the username and searches all txt files with the same name (username.txt) in the current directory/folder, 
		if the txt is found then return to the client the messages inside the txt file and if not 
		return a message to the client: no messages for you.
--------------------------------------------------------------------------
Code explanation in depth:

+----------+
| Server.c |
+----------+-------------------------------------------------------------------

	// save server IP
	  memset(&ServerIp,'0',sizeof(ServerIp) );

	   ServerIp.sin_family = AF_INET;
	   ServerIp.sin_port = htons(atoi(argv[2]));
	   ServerIp.sin_addr . s_addr = inet_addr(argv[1]);
	// assign ip address to the server

	// print fail if the client and server sockets cant connect with each other
	  if(bind( sock,(struct sockaddr* )&ServerIp, sizeof(ServerIp)) == -1 )
	    printf("Socket binding failed\n");
	   
	// listen to request from client 
	  if( listen(sock,20) == -1) 
	    printf("Error\n");
	  else  
	    printf("Server started at: %s\n",argv[1]);
	 
	// server accepts the clients request
	  client_conn = accept( sock, (struct sockaddr*)NULL, NULL);
	  printf(" A request from client accepted \n");

	// recv - receive a message from socket  
		  if( recv(client_conn, data_received, 1024, 0 ) == 0 ) // nothing is received
		  {
		    printf("gotoend\n");
		    goto end;
		  }
		  else
		  {
		  	// the server must understand if the client wants to read or write , and that is implemented by checking if the message received from client has the '|' symbol inside 
		    for(i=0;i<strlen(data_received);i++)
		    {
		      if(data_received[i]=='|') // if '|' is found in the message it means client wants to write
		      {
		        p++;
		        break;
		      }
		    }

		    if(p==0) // client wants to read
		    {
		        char buff[255];
		        FILE *fptr;

		        if( (fptr=fopen(data_received,"r"))==NULL) 
		        {
		          //send to client: NO MESSAGES FOUND FOR YOU
		         strcpy(buff,"no messages found for you\n");
		           write( client_conn, buff, sizeof(buff) ); // write to socket
		          goto end;
		        }
		        else // client has inbox messages
		        {
		          //send to client the message inside the txt with his username
		          fptr=fopen(data_received,"r");
		        
		          char m[255];
		          while(fgets(buff,255,fptr)!=NULL) // read whole file until end
		            strcat(m,buff); // every line
		 
		          // send buff to client
		          write( client_conn, m, sizeof(m) ); // write to socket

		          fclose(fptr);
		          goto end;
		        }
		    }


		printf(" Response Received is : %s\n", data_received );
		// extract recipient from the message and put the message at a recipient.txt file
		   //the message form is: sender|recipient|message, so we need to search where the recipient is inside the message
		    for(i=0;i<strlen(data_received);i++)
		    {
		      if(data_received[i]=='|')
		      {
		        pos = i;
		        break;
		      }
		    }

		    for(i=pos+1;i<strlen(data_received);i++)
		    {
		      if(data_received[i]=='|')
		      {
		        pos2 = i;
		        break;
		      }
		    }
		    
		    i=0;
		    for(j=pos+1;j<pos2;j++)
		    {
		      recipient[i] = data_received[j];
		      i++;
		    }

		   // write message to file
		    FILE *ptr;
		    ptr=fopen(recipient,"a");
		    if(ptr==NULL)
		    {
		      printf("error!");
		      exit(1);
		    }

		    fprintf(ptr,"%s",data_received);
		    fclose(ptr);
		  }

		  end:
		  close( client_conn );

		  return 0;


+----------+
| Client.c |
+----------+--------------------------------------------------------------------

// create socket
   if( (sock = socket(AF_INET, SOCK_STREAM ,0 )) == -1 )
   	printf(" socket creation failed ");

// define ip and port 
   same as server

// connect to socket 
   if( (connect( sock, (struct sockaddr *)&ServerIp, sizeof(ServerIp) )) == -1 ){
   	printf("connection to the socket failed ");
    	exit(0);
   }
   else
    	printf(" connected to socket \n");

// writing to socket
    write( sock, data_send, sizeof(data_send) ); 

// receiving message from server
    if( recv(sock, data_received, 1024, 0 ) != 0 ) 
    {
      printf("%s",data_received);
    }

+-------------------------------+
| Output of the program         |
+-------------------------------+-----------------------------------------

> example for write:

		Server                                |      Client
		                                      |
		./server2 127.0.0.1 5182
		Server started at: 127.0.0.1, port 5182
		                                      |
													
											  |		./client2 127.0.0.1
													connected to socket 
		                                      |
		A request from client accepted 
		                                      |
											  	    Enter a username:
											  |		george
													press 'w' to Write a message or 'r' to Read a message
											  |		w
													enter recipient username: otheruser
						                      |		Enter a message >> hello

Response Received is : george|otheruser|hello  
											  |

----------------------------

> example for read:

		Server                                |      Client
		                                      |
		./server2 127.0.0.1 5182
		Server started at: 127.0.0.1, port: 5182
		                                      |
													
											  |		./client2 127.0.0.1
													connected to socket 
		                                      |
		A request from client accepted 
		                                      |
											  	    Enter a username:
											  |		otheruser
													press 'w' to Write a message or 'r' to Read a message
											  |		r
													Inbox:
													--------------------------
													george|otheruser|hello
 											  |		--------------------------s

 
											  